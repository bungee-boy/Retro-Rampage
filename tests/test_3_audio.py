import unittest
import main as game
from time import sleep


class TestLib(unittest.TestCase):
    def test_audio_loader(self):
        err_msg = 'Audio loader test failed!'
        self.assertEqual(game.sounds.menu_track(0), game.sounds.menu_music + 'chiptune_racer.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(1), game.sounds.menu_music + 'cruise_control.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(2), game.sounds.menu_music + 'final_lap.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(3), game.sounds.menu_music + 'lets_ride.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(4), game.sounds.menu_music + 'night_race.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(5), game.sounds.menu_music + 'retired_racer.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(6), game.sounds.menu_music + 'rival_racer.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(7), game.sounds.menu_music + 'select_your_vehicle.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(8), game.sounds.menu_music + 'start_your_engines.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(9), game.sounds.menu_music + 'the_championship.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(10), game.sounds.menu_music + 'track_selection.mp3', err_msg)
        self.assertEqual(game.sounds.menu_track(11), game.sounds.menu_music + 'upgrades.mp3', err_msg)
        self.assertRaises(ValueError, game.sounds.menu_track, -1)
        self.assertRaises(ValueError, game.sounds.game_track, -1)
        self.assertRaises(ValueError, game.sounds.explosion, 'x', 0)


class TestUsage(unittest.TestCase):
    def test_music(self):
        game.Mute_volume = False
        game.menu_music()
        self.assertTrue(game.pygame.mixer.music.get_busy(), 'Menu music test failed!')
        game.game_music(0)
        self.assertEqual(game.current_song, game.sounds.game_track(0), 'Game music test failed!')
        self.assertTrue(game.pygame.mixer.music.get_busy(), 'Game music test failed!')
        game.Mute_volume = True
        game.pygame.mixer.music.pause()
        game.game_music(0)
        self.assertFalse(game.pygame.mixer.music.get_busy(), 'Game music test failed!')
        game.Mute_volume = False
        game.pygame.mixer.music.unpause()
        game.pygame.mixer.music.unload()
        game.game_music(1)
        self.assertEqual(game.current_song, game.sounds.game_track(1), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(2)
        self.assertEqual(game.current_song, game.sounds.game_track(2), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(3)
        self.assertEqual(game.current_song, game.sounds.game_track(3), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(4)
        self.assertEqual(game.current_song, game.sounds.game_track(2), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(5)
        self.assertEqual(game.current_song, game.sounds.game_track(3), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(6)
        self.assertEqual(game.current_song, game.sounds.game_track(2), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(0, True)
        self.assertEqual(game.current_song, game.sounds.game_track(4), 'Game music test failed!')
        game.pygame.mixer.music.unload()

    def test_sfx(self):
        game.Mute_volume = False
        game.loaded_sounds = []
        game.play_sound('error')
        game.play_sound('boot')

        game.play_sound('collision')
        self.assertTrue(game.loaded_sounds, 'SFX test failed!')
        sleep(0.1)
        game.play_sound('power up')
        self.assertIn(game.sounds.positive(3), game.loaded_sounds[1], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('lightning')
        self.assertIn(game.sounds.explosion('medium', 10), game.loaded_sounds[2], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('bullet')
        self.assertIn(game.sounds.machine_gun(6), game.loaded_sounds[3], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('boost')
        self.assertIn(game.sounds.alarm(8), game.loaded_sounds[4], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('repair')
        self.assertIn(game.sounds.interaction(6), game.loaded_sounds[5], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('lap advance')
        self.assertIn(game.sounds.positive(18), game.loaded_sounds[6], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('lap finish')
        self.assertIn(game.sounds.positive(7), game.loaded_sounds[7], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('menu button')
        self.assertIn(game.sounds.menu(4), game.loaded_sounds[8], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('option up')
        self.assertIn(game.sounds.menu(2), game.loaded_sounds[9], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('option down')
        self.assertIn(game.sounds.menu(3), game.loaded_sounds[10], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('controller connect')
        self.assertIn(game.sounds.pause_sound(4), game.loaded_sounds[11], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('controller disconnect')
        self.assertIn(game.sounds.pause_sound(4, out=True), game.loaded_sounds[12], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('text entry')
        self.assertIn(game.sounds.menu(1), game.loaded_sounds[13], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('start button')
        self.assertIn(game.sounds.menu(4, select=True), game.loaded_sounds[14], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('save button')
        self.assertIn(game.sounds.menu(2, select=True), game.loaded_sounds[15], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('traffic light advance')
        self.assertIn(game.sounds.bleep(2), game.loaded_sounds[16], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('traffic light finish')
        self.assertIn(game.sounds.bleep(11), game.loaded_sounds[17], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('pause in')
        self.assertIn(game.sounds.pause_sound(3), game.loaded_sounds[18], 'SFX test failed!')
        sleep(0.1)
        game.play_sound('pause out')
        self.assertIn(game.sounds.pause_sound(3, out=True), game.loaded_sounds[19], 'SFX test failed!')
        sleep(0.1)
        self.assertRaises(ValueError, game.play_sound, 'x')
