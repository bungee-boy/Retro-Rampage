import unittest
import main as game


class TestMusic(unittest.TestCase):
    def test_music(self):
        game.menu_music()
        self.assertTrue(game.pygame.mixer.music.get_busy(), 'Menu music test failed!')
        game.game_music(0)
        self.assertEqual(game.current_song, game.sounds.game_track(0), 'Game music test failed!')
        self.assertTrue(game.pygame.mixer.music.get_busy(), 'Game music test failed!')
        game.Mute_volume = True
        game.pygame.mixer.music.pause()
        game.game_music(0)
        self.assertFalse(game.pygame.mixer.music.get_busy(), 'Game music test failed!')
        game.Mute_volume = False
        game.pygame.mixer.music.unpause()
        game.pygame.mixer.music.unload()
        game.game_music(1)
        self.assertEqual(game.current_song, game.sounds.game_track(1), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(2)
        self.assertEqual(game.current_song, game.sounds.game_track(2), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(3)
        self.assertEqual(game.current_song, game.sounds.game_track(3), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(4)
        self.assertEqual(game.current_song, game.sounds.game_track(2), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(5)
        self.assertEqual(game.current_song, game.sounds.game_track(3), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(6)
        self.assertEqual(game.current_song, game.sounds.game_track(2), 'Game music test failed!')
        game.pygame.mixer.music.unload()
        game.game_music(0, True)
        self.assertEqual(game.current_song, game.sounds.game_track(4), 'Game music test failed!')

    def test_sfx(self):
        game.loaded_sounds = []
        game.play_sound('error')
        game.play_sound('boot')

        game.play_sound('collision')
        self.assertTrue(game.loaded_sounds, 'SFX test failed!')
        game.play_sound('power up')
        self.assertIn(game.sounds.positive(3), game.loaded_sounds[1], 'SFX test failed!')
        game.play_sound('lightning')
        self.assertIn(game.sounds.explosion('medium', 10), 'SFX test failed!')
        game.play_sound('bullet')
        self.assertIn(game.sounds.machine_gun(6), game.loaded_sounds[2], 'SFX test failed!')
        game.play_sound('boost')
        self.assertIn(game.sounds.alarm(8), game.loaded_sounds[3], 'SFX test failed!')
        game.play_sound('repair')
        self.assertIn(game.sounds.interaction(6), game.loaded_sounds[4], 'SFX test failed!')
        game.play_sound('lap advance')
        game.play_sound('lap finish')
        game.play_sound('menu button')
        game.play_sound('option up')
        game.play_sound('option down')
        game.play_sound('controller connect')
        game.play_sound('controller disconnect')
        game.play_sound('text entry')
        game.play_sound('start button')
        game.play_sound('save button')
        game.play_sound('traffic light advance')
        game.play_sound('traffic light finish')
        game.play_sound('pause in')
        game.play_sound('pause out')
